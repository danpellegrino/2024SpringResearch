#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2024/03/14 01:31:09
# Search URL: https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.HighResMIP.MRI.MRI-AGCM3-2-S.highresSST-future.r1i1p1f1.day.sfcWind.gn.v20200619|esgf-data1.llnl.gov
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget?dataset_id=CMIP6.HighResMIP.MRI.MRI-AGCM3-2-S.highresSST-future.r1i1p1f1.day.sfcWind.gn.v20200619|esgf-data1.llnl.gov'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20150101-20151231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20150101-20151231.nc' 'SHA256' 'd57e27acd04481821b748c42fbd6bc304388d70ae4605bd8509f256be82d3265'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20160101-20161231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20160101-20161231.nc' 'SHA256' 'aeef35f76487fd15fce17a37c0db9df389c4db5521e9b18e938fac808a8f2e94'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20170101-20171231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20170101-20171231.nc' 'SHA256' 'e64796a443b721162b45dfadc5dd04229f7ca0f7f6b292382afdd3a29713d9d9'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20180101-20181231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20180101-20181231.nc' 'SHA256' '73ae7eed3f632426a050373123bd6a6c9d50cc8b8e30770b71f5e808c45a5c1a'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20190101-20191231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20190101-20191231.nc' 'SHA256' '8cfcacaf91e7213a303db81440f3659705295d34a27648b2babefe6d8f30fe0d'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20200101-20201231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20200101-20201231.nc' 'SHA256' 'f2ec0ecb51940570a8ce58b44f6c906a8f3a6a4dfc358d172e630c181aee37dc'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20210101-20211231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20210101-20211231.nc' 'SHA256' 'bc24081835ee95509b9799fbf35d8ea5d76d92c22560865bbca78d61ab06f46f'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20220101-20221231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20220101-20221231.nc' 'SHA256' 'e5c00ae249621cfdd1b96ab34a76a4447e06e1606f971d476042ee8ce214008f'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20230101-20231231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20230101-20231231.nc' 'SHA256' 'dfe7a57262f90df0b08c8024974938ad442eea8bd07febb2939ce6812e64530e'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20240101-20241231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20240101-20241231.nc' 'SHA256' 'a7e8782266db9fb48a24f0a9204c7ea83bac742725ff85bcd4775d6f0a3b837d'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20250101-20251231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20250101-20251231.nc' 'SHA256' '045a29045703758d123d7ff51a0850fca1640a28e6b9982d1b95c3edc582a16f'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20260101-20261231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20260101-20261231.nc' 'SHA256' '7ed18f806314822197bc15e1b1895370b13022fd545a7884dcee0f54452e84f2'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20270101-20271231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20270101-20271231.nc' 'SHA256' '6cb50fde6d33fa822911652a9980d6cf17b56097e7dbd685a301ba22bd8c84b6'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20280101-20281231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20280101-20281231.nc' 'SHA256' '2da026c89604b0e24810b46599858cf64491a6f3a781ed25971190d648b93ed0'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20290101-20291231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20290101-20291231.nc' 'SHA256' 'e99d982101bd7654dcf97345b3d6c5ceee0e28f550cd9a3b8d06da53725dd68c'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20300101-20301231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20300101-20301231.nc' 'SHA256' 'bdeb5155391b9453ae78501e5514ee732e41f26e2c6443b267bd9ff2f90a6565'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20310101-20311231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20310101-20311231.nc' 'SHA256' 'f0cbc4379424b9530662e6ef1f0b4b329be1caf133d5fd727478b59dd7db1a9d'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20320101-20321231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20320101-20321231.nc' 'SHA256' '2c5766ddd662e155a026e0046c2254dcc3aa79f962838907e50db9074ac0420a'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20330101-20331231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20330101-20331231.nc' 'SHA256' 'be902d46e7f36e60afb92d2da164be62316bba43bd83a1595c6b3c848ed6bd41'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20340101-20341231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20340101-20341231.nc' 'SHA256' '88a976f0c471edd451134637328d3dc71b3ebc3ee0db4613d5c6ca5192d41f8c'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20350101-20351231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20350101-20351231.nc' 'SHA256' '1b5368a32e7b89e24badcaa939184fa56873da6b02338d97878d7d4ff3478b29'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20360101-20361231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20360101-20361231.nc' 'SHA256' '3eaf525196357c12b94401d34ac71e485f7070823552312a052163d2273910f3'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20370101-20371231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20370101-20371231.nc' 'SHA256' 'aa205c067cdc99430fccce44d2f26a164b90883a69fa51304dac3f8af1967d29'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20380101-20381231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20380101-20381231.nc' 'SHA256' 'e7d23ecf98e353bf0642d279403a606c30621350f236c8c64527763fa6b8a6ae'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20390101-20391231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20390101-20391231.nc' 'SHA256' 'f5bda315151186219de0e519f16d48344973afddcaefedf7c6b73c1b73324091'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20400101-20401231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20400101-20401231.nc' 'SHA256' 'c39b979d1108e2c788635c07c86d95308683d14173d5ccc175d7478785ad2703'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20410101-20411231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20410101-20411231.nc' 'SHA256' 'd2aeb8486b514cffbeaae88ba9ecb904b9128a510a1b7d85fe6860d4c5d15c96'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20420101-20421231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20420101-20421231.nc' 'SHA256' 'e4bd0800f7f36047cfa0e450a1e68ff3d6279bf905eb47c6db39a749f056822a'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20430101-20431231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20430101-20431231.nc' 'SHA256' '97c730c8cd9c170aca45b3753ccc285695d048de623ae64d7d7fc8ba67d73e4c'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20440101-20441231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20440101-20441231.nc' 'SHA256' '0704000ac4be670ff36ef3806d0876ceb65246e55a260d6c27f48bacf49750ac'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20450101-20451231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20450101-20451231.nc' 'SHA256' 'e7a5719829e1f07488b78fb982d0e7df301a74aa1c9577d448d8a545cea5dd21'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20460101-20461231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20460101-20461231.nc' 'SHA256' 'ab42defde67be38a4b311f1ae147034bc7927163eb0b921db213970e005ac122'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20470101-20471231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20470101-20471231.nc' 'SHA256' '2a5a5dc6bf5e2a9907cf89307fed8f7a0718631a1e2045c9eed227e172b57327'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20480101-20481231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20480101-20481231.nc' 'SHA256' '67bd4d5f2a2d1114b4d0b0f111a97bd790fd7c5cdcd3f3b8799f36fcb71ccb94'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20490101-20491231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20490101-20491231.nc' 'SHA256' '485c198b50078b80803ef2abf270fd510d222b00868a594f6d9c3a6ad1f0f16b'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20500101-20501231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20500101-20501231.nc' 'SHA256' '9873df0b7cd751982e400c51eecd6a3aaaaa5bd74ccffc4b3d361f3391e6d368'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20510101-20511231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20510101-20511231.nc' 'SHA256' '8c3398c6d5d0a58a089be4ef21418eda5d7adbf466953ff84e3e5e8b2471a299'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20520101-20521231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20520101-20521231.nc' 'SHA256' '3ef09ffef067309de66a011b264a0abe4a81dc4071f80c2c140da56483edb0bb'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20530101-20531231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20530101-20531231.nc' 'SHA256' '2a4b824d620e2512af30f53433e7ff1cbf519860021fe1eb317e99271a224f80'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20540101-20541231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20540101-20541231.nc' 'SHA256' '7aaab62df3029b4c4f403dd2aef68f2588e517fe95cde78fb61920709fc84e50'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20550101-20551231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20550101-20551231.nc' 'SHA256' 'fca3a90bdfa86abd59aa044c7fa485143a38cc045dbcd495b0d880f658936550'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20560101-20561231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20560101-20561231.nc' 'SHA256' 'c231c9baf7a263b058cf75d38cf3b27d9058d0ff3dd224146c66053fa8a5a454'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20570101-20571231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20570101-20571231.nc' 'SHA256' '10a5881274cc2b8e605e27dfc7dd76f1b481717586f839796de0eee76909afb7'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20580101-20581231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20580101-20581231.nc' 'SHA256' 'd9d71d460f8ea5ae455ea24df57d141bba2df9576020ed9c61d853a534036be2'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20590101-20591231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20590101-20591231.nc' 'SHA256' '1cefa23ac2b87032dcbccbf6f562d366eeba5d261b6b246581a906d25f568c1a'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20600101-20601231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20600101-20601231.nc' 'SHA256' '3d977650fcface14008a284bb9fd6da91d36b66f582fbd1e7f4a0b2bea789caa'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20610101-20611231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20610101-20611231.nc' 'SHA256' '8ecc9cae8b9961e32a9162d991e71935016861aacc9ef4a700096c341372884d'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20620101-20621231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20620101-20621231.nc' 'SHA256' '62c26fb728c4f9b3e80cc07a8494990f581c7176b316111b4ada5bd50b2f22a6'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20630101-20631231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20630101-20631231.nc' 'SHA256' '475089592b56503ae825de33c83a19cd846cbd1377ca5439dc9a45e534a9b215'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20640101-20641231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20640101-20641231.nc' 'SHA256' '7c3b9a8e8c625c50a677d732b053fdaf37e61548e5275f22f332bd68d328fd0a'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20650101-20651231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20650101-20651231.nc' 'SHA256' '85ff20e634196d7cad9546f204796e89f729b76a3ebc605cdf2a66d614768c22'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20660101-20661231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20660101-20661231.nc' 'SHA256' 'a92c70b5c2c2ab1f7668d332ba3751de3ce26d06c7831a2cae30c1f2f8fe6fa0'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20670101-20671231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20670101-20671231.nc' 'SHA256' 'afc4bd9743c45fa3dde52dfd9e0c1d56696f657d3e6d4ba2180f3029bcda1ce9'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20680101-20681231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20680101-20681231.nc' 'SHA256' '04c5241e9e4f65d886c482bab7474676f5ebae81b491ae5413891933d9df3109'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20690101-20691231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20690101-20691231.nc' 'SHA256' '04b9efa3d60c0353d77d621afe60f8589535e6a574e771291f7734c789c4fafc'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20700101-20701231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20700101-20701231.nc' 'SHA256' 'b8434dd49225dcba70cfce3a14a43ddacc2708307e01346de987d23ac192118c'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20710101-20711231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20710101-20711231.nc' 'SHA256' 'eb9af01e485975c6331140538618a4a34ae219d73d7d3f88fbfb345abb30e9fd'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20720101-20721231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20720101-20721231.nc' 'SHA256' 'ea098783bedd9a76c3c04d82c946acafa42a3f1cf22a3a039d9348d14d39add0'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20730101-20731231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20730101-20731231.nc' 'SHA256' 'a30ba1936dd6d7d027f1c0c0a39d1f315f189f33f0db7a54b9e9feda22db6d75'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20740101-20741231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20740101-20741231.nc' 'SHA256' 'b862f85c69cbfa32331c344a95e85163d63763b387c7125cbb281d464a915bd6'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20750101-20751231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20750101-20751231.nc' 'SHA256' '9816b9f243194302d566b4a9691af20a898b7618303645cf936bd70e49111cda'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20760101-20761231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20760101-20761231.nc' 'SHA256' '51ffc4d522e040fbb224d7bd0076134cb07df56da1fd5349c6f63d094ae34452'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20770101-20771231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20770101-20771231.nc' 'SHA256' 'beea0a7e7fdd5e9a8d70500f03a280201f09ceed445c3b4efbd0fabcf144a681'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20780101-20781231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20780101-20781231.nc' 'SHA256' 'b8c8d1777bd977e7aedd40c716bf403a5a1ad394272f83361262dd5009a4a7b4'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20790101-20791231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20790101-20791231.nc' 'SHA256' '211197accc4200b6c76107098313b8533db91aa7a7f239a9777a0091ebfdfa22'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20800101-20801231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20800101-20801231.nc' 'SHA256' '287c4d9df05fadd687d59988c7ec1cd3dc5235c85b0bd1ef75dbca9cca8451fb'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20810101-20811231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20810101-20811231.nc' 'SHA256' '18493dcd0896f6ccae7c2c31cfa405609b62681db3268f7c486bedf02262cf5b'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20820101-20821231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20820101-20821231.nc' 'SHA256' 'f337ba8395cc9b766ca4ecbf7572e433884203351b1f0b2adda308afb8cf6a3a'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20830101-20831231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20830101-20831231.nc' 'SHA256' '1c68af71186312f1ed08e17bae66e4db4046641beb71023a422aa34ace5b7cc1'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20840101-20841231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20840101-20841231.nc' 'SHA256' 'cd5701da3d70bc42aa67fba2cd8a65600b65511bdc83b54b2179ee55c33a9948'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20850101-20851231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20850101-20851231.nc' 'SHA256' 'bb74af7e2481994b90f027d5484a984a4194a5443a175bee1fec619dcb79bb5a'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20860101-20861231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20860101-20861231.nc' 'SHA256' '87e3b79273cba94ee0d029853bc469d2b4ce58f592dc7c4703a532b366e54bae'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20870101-20871231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20870101-20871231.nc' 'SHA256' '79e3784fc3b6bfaffced8a186e5fb65db6d74b6b497a09da390f3f3d5e31d5c2'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20880101-20881231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20880101-20881231.nc' 'SHA256' '392fdac27768fb737d6f585928ff209d214653f2a1e0ca6811430e380b84d8bc'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20890101-20891231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20890101-20891231.nc' 'SHA256' '6a72df4462a81f4195459b3d71f33f93181759d2505120d20769779f621d281b'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20900101-20901231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20900101-20901231.nc' 'SHA256' 'eed3b5716c806d76f8cc665866d65d62575d3108895f9e60e1a34886db49267f'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20910101-20911231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20910101-20911231.nc' 'SHA256' '97489ccceee962806862106e25a9f0201dc49a15209aacdee8731af5e79b5ec6'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20920101-20921231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20920101-20921231.nc' 'SHA256' 'ce6ac57dcd6d7180641874a6ee9e0c919508593f4a46c9ab2746af4838ee1890'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20930101-20931231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20930101-20931231.nc' 'SHA256' '6ddbb01f1683f20ae0192818b794f0c219d0b9a0005fc3764a7ea336d0fdbfb7'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20940101-20941231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20940101-20941231.nc' 'SHA256' '6c27762c1c280e89f7fd1efe4a80ad85e3f9972713ed6b145b1794c1fde05161'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20950101-20951231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20950101-20951231.nc' 'SHA256' '53da75802e0f2dc2db278a3397d4b920914ae63cf546157fc86982a2ff8e3b34'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20960101-20961231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20960101-20961231.nc' 'SHA256' '33444e5d9c6c01512d18a46e819508af3f621820249fd381791c1280fc641c1f'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20970101-20971231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20970101-20971231.nc' 'SHA256' '2e9ff313c119cae675199f538170159c2edde9864f0487ac9762cdec9fa06a9a'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20980101-20981231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20980101-20981231.nc' 'SHA256' '8eb6c06382feb1b091a2ed8154debb45c68836c79fe7f72bba127df6a5ca3c88'
'sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20990101-20991231.nc' 'https://esgf-data1.llnl.gov/thredds/fileServer/css03_data/CMIP6/HighResMIP/MRI/MRI-AGCM3-2-S/highresSST-future/r1i1p1f1/day/sfcWind/gn/v20200619/sfcWind_day_MRI-AGCM3-2-S_highresSST-future_r1i1p1f1_gn_20990101-20991231.nc' 'SHA256' '81f76a426cec34ef27af2a8dc071f21f1a3299ed70847b724826bf06c989b352'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 85 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
